{"version":3,"sources":["components/Place/Place.js","components/PlaceInfo/PlaceInfo.js","components/App/App.js","reportWebVitals.js","index.js"],"names":["Place","name","date","info","coordinates","selectPlace","id","moveToPlace","defaultGeometry","onClick","PlaceInfo","place","isPlaceToggled","togglePlace","currentId","slides","nextSlide","backSlide","console","log","images","className","src","alt","speech","map","url","i","length","App","useState","selectedId","setSelectedId","isPlaceSelected","setIsPlaceSelected","selectedPlace","setSelectedPlace","mapRef","useRef","placeName","placeDate","placeInfo","placeCoordinates","current","panTo","then","useEffect","instanceRef","ref","defaultState","center","zoom","style","width","height","placeId","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a48947ff.chunk.js","sourcesContent":["import './Place.css';\r\nimport {Placemark} from 'react-yandex-maps';\r\n\r\nconst Place = ({name, date, info, coordinates, selectPlace, id, moveToPlace}) => {\r\n\r\n    function handleSelectPlace() {\r\n        moveToPlace(coordinates);\r\n        selectPlace(name, date, info, coordinates, id);\r\n    }\r\n\r\n    return (\r\n        <Placemark defaultGeometry={coordinates} onClick={handleSelectPlace} />\r\n    )\r\n};\r\n\r\nexport default Place;","import './PlaceInfo.css';\r\n\r\nconst PlaceInfo = ({place, isPlaceToggled, togglePlace, currentId, slides, nextSlide, backSlide}) => {\r\n\r\n    console.log(slides[currentId].images)\r\n\r\n    const imageUrl = `https://cdn.pixabay.com/photo/2020/09/04/09/09/snow-leopard-5543394_960_720.png`;\r\n\r\n    return (\r\n        <section className={`info ${isPlaceToggled ? '' : \"info-hidden\"}`}>\r\n            <div className=\"info__dialog\">\r\n                <div className=\"info__part\">\r\n                    <div className=\"info__person\">\r\n                        <img className=\"info__speaker\" src={imageUrl} alt=\"bars\" />\r\n                        <p className=\"info__date\">{slides[currentId].date ? `-> ${slides[currentId].date}` : ''}</p>\r\n                    </div>\r\n                    <h1 className=\"info__title\">{slides[currentId].speech}</h1>\r\n                </div>\r\n                <div className=\"info__images\">\r\n                    {\r\n                        slides[currentId].images ? \r\n                        (\r\n                            slides[currentId].images.map((url, i) => {\r\n                                return <img className=\"info__image\" src={url} key={i} alt=\"image\" /> \r\n                            })\r\n                        )\r\n                        :\r\n                        \"\"\r\n                    }\r\n                </div>\r\n                <div className=\"info__buttons\">\r\n                    {currentId ? <button className=\"info__button info__back\" onClick={backSlide}>Назад</button> : \"\"}\r\n                    {currentId + 1 === slides.length ? \"\" : <button className=\"info__button info__next\" onClick={nextSlide}>Дальше =></button>}\r\n                </div>\r\n                <p className=\"info__progress\">{currentId + 1}/{slides.length}</p>\r\n            </div>\r\n            <button className={`info__toggler ${isPlaceToggled && 'info__button-toggled'}`} onClick={togglePlace}>\r\n\r\n            </button>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default PlaceInfo;","import { useEffect, useState, useRef } from 'react';\nimport { YMaps, Map } from 'react-yandex-maps';\nimport Place from '../Place/Place';\nimport PlaceInfo from '../PlaceInfo/PlaceInfo';\n\nconst App = () => {\n\n  const [selectedId, setSelectedId] = useState(0);\n  const [isPlaceSelected, setIsPlaceSelected] = useState(false);\n  const [selectedPlace, setSelectedPlace] = useState({});\n\n  const mapRef = useRef(null);\n\n  const places = [\n    {\n      placeId: 1,\n      placeCoordinates: [55.772203, 48.659044],\n    }\n  ];\n  \n  const slides = [\n    {\n      speech: \"Здесь будут спикер. Я выбрал снежного барса, так как он тоже изображал Казань\"\n    }, \n    {\n      speech: \"Тут можно составлять 'слайды' по разным местам, которые мы посетили. Карта автоматически будет перекидать нас на выбранную точку.\",\n      coordinates: [55.772203, 48.659044],\n      date: \"12/06\",\n    },\n    {\n      speech: \"К таковым слайдам можно прикреплять фотографии (даня ниже), и дату посещения.\",\n      coordinates: [56.631600, 47.886178],\n      date: \"12/06\",\n      images: [\n        \"https://media.discordapp.net/attachments/831925379253010497/831960799421399110/image0.jpg?width=1211&height=910\",\n        \"https://media.discordapp.net/attachments/831925379253010497/831961661325574166/image0.jpg?width=682&height=910\",\n        \"https://media.discordapp.net/attachments/831925379253010497/831961661664657418/image1.jpg?width=682&height=910\",\n      ]\n    },\n    {\n      speech: \"Думаю этот веб-сайт можно будет распространять по QR кодам. Так наша презентация будет интереснее с интерактивом.\",\n      coordinates: [55.821496, 49.160784],\n      date: \"12/06\",\n    },\n    {\n      speech: \"Буду ждать идей и советов насчёт веб-сайта. Также очень жду сообщений об разных местах. Их добавлять долго, желательно получить всё до вечера четверга.\",\n      coordinates: [55.810584, 49.122956],\n      date: \"12/06\",\n    },\n    {\n      speech: \"Вот и конец! Надеюсь тебе понравилось приключение!\"\n    }\n  ]\n\n  function selectPlace(name, date, info, coordinates, id) {\n    setSelectedPlace({\n      placeName: name,\n      placeDate: date,\n      placeInfo: info,\n      placeCoordinates: coordinates,\n    });\n    setSelectedId(id);\n    setIsPlaceSelected(true);\n  }\n\n  function moveToPlace(coordinates) {\n    if (mapRef.current && coordinates) {\n      mapRef.current.panTo(coordinates)\n          .then(() => {\n              setIsPlaceSelected(true);\n          })\n  }\n  }\n\n  function togglePlace () {\n    setIsPlaceSelected(!isPlaceSelected);\n  }\n\n  function nextSlide() {\n    setSelectedId(selectedId + 1);\n  }\n  function backSlide() {\n    setSelectedId(selectedId - 1);\n  }\n\n  useEffect(() => {\n    moveToPlace(slides[selectedId].coordinates);\n    // console.log(slides[selectedId].coordinates)\n  }, [selectedId])\n\n  return (\n    <>\n    <main className=\"main\">\n    <PlaceInfo isPlaceToggled={isPlaceSelected} place={selectedPlace} togglePlace={togglePlace} currentId={selectedId} slides={slides} nextSlide={nextSlide} backSlide={backSlide} />\n    <YMaps>\n      <Map\n      instanceRef={ref => {\n        if (ref) mapRef.current = ref;\n    }} \n        defaultState={{ center: [55.75, 37.57], zoom: 9 }} style={{\n        width: \"100%\",\n        height: \"100vh\",\n      }}>\n        {\n          places.map(({placeName, placeDate, placeInfo, placeCoordinates, placeId}, i) => {\n            return <Place name={placeName} date={placeDate} info={placeInfo} coordinates={placeCoordinates} id={placeId} moveToPlace={moveToPlace} selectPlace={selectPlace} key={i} />\n          })\n        }\n      </Map>\n  </YMaps>\n    </main>\n  </>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}